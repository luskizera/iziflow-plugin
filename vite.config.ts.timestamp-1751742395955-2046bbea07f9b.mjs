// vite.config.ts
import path from "path";
import { defineConfig } from "file:///F:/Design/local-repos/iziFlow/node_modules/vite/dist/node/index.js";
import { figmaPlugin, figmaPluginInit, runAction } from "file:///F:/Design/local-repos/iziFlow/node_modules/vite-figma-plugin/lib/index.js";
import tailwindcss from "file:///F:/Design/local-repos/iziFlow/node_modules/@tailwindcss/vite/dist/index.mjs";
import { viteSingleFile } from "file:///F:/Design/local-repos/iziFlow/node_modules/vite-plugin-singlefile/dist/esm/index.js";
import react from "file:///F:/Design/local-repos/iziFlow/node_modules/@vitejs/plugin-react/dist/index.mjs";

// package.json
var version = "1.0.0";

// figma.config.ts
var manifest = {
  name: "IziFlow V2",
  id: "com.luskizera.iziflow-v2",
  api: "1.0.0",
  main: "code.js",
  ui: "index.html",
  editorType: [
    "figjam"
  ],
  documentAccess: "dynamic-page",
  networkAccess: {
    allowedDomains: ["*"],
    reasoning: "For accessing remote assets"
  }
};
var extraPrefs = {
  copyZipAssets: ["public-zip/*"]
};
var config = {
  manifest,
  version,
  ...extraPrefs
};

// vite.config.ts
var __vite_injected_original_dirname = "F:\\Design\\local-repos\\iziFlow";
var action = process.env.ACTION;
var mode = process.env.MODE;
if (action) runAction({}, action);
figmaPluginInit();
var vite_config_default = defineConfig({
  plugins: [
    react(),
    viteSingleFile(),
    tailwindcss(),
    figmaPlugin(config, mode)
  ],
  build: {
    assetsInlineLimit: 0,
    emptyOutDir: false,
    outDir: ".tmp",
    sourcemap: mode === "development",
    rollupOptions: {
      output: {
        inlineDynamicImports: true
        // Removido manualChunks pois não é compatível com inlineDynamicImports
      },
      treeshake: true
    },
    chunkSizeWarningLimit: 2e3,
    // Aumentado para evitar warnings
    minify: "terser",
    terserOptions: {
      compress: {
        drop_console: false,
        // Mantém os console.logs
        drop_debugger: false,
        pure_funcs: [],
        // Remove a remoção dos console.logs
        passes: 2
      },
      format: {
        comments: false
      }
    },
    target: "esnext"
  },
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./src")
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
